name: Build & Publish Docker Image

on:
  workflow_call:
    inputs:
      imageTag:
        required: true
        type: string
      latestTag:
        required: true
        type: string
      workingDirectory:
        required: true
        type: string
      buildArgs:
        required: false
        type: string
      packageName:
        required: true
        type: string
      imagePlatform:
        required: false
        type: string
      env:
        required: true
        type: string

# Required for authentication through GitHub OIDC
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.workingDirectory }}

    environment: ${{ inputs.env }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine AWS account ID and role
        id: account
        run: |
            if [ "${{ inputs.env }}" == "prod" ]; then
              echo "role_arn=${{ secrets.PROD_AWS_ACC_ROLE }}" >> $GITHUB_OUTPUT
            else
              echo "role_arn=${{ secrets.DEV_AWS_ACC_ROLE }}" >> $GITHUB_OUTPUT
            fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-region: eu-west-1
            role-to-assume: ${{ steps.account.outputs.role_arn }}

      - name: Login To Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          platforms: ${{ inputs.imagePlatform }}
          build-args: |
            ${{ inputs.buildArgs }}
          push: true
          context: ${{ inputs.workingDirectory }}
          provenance: false
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/vechain/${{ inputs.packageName }}:${{ inputs.imageTag }}
            ${{ steps.login-ecr.outputs.registry }}/vechain/${{ inputs.packageName }}:${{ inputs.latestTag }}

      - name: Scan Docker image
        id: docker-scan
        uses: alexjurkiewicz/ecr-scan-image@v2.0.0
        with:
          repository: vechain/${{ inputs.packageName }}
          tag: ${{ inputs.imageTag }}
          fail_threshold: high

      # - name: On Scan Failure
      #   if: failure() && steps.docker-scan.outcome == 'failure'
      #   run: |
      #     aws ecr batch-delete-image \
      #       --repository-name vechain/${{ inputs.packageName }} \
      #       --image-ids imageTag=${{ inputs.imageTag }} imageTag=${{ inputs.latestTag }}
